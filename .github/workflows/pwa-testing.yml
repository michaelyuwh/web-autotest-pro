name: PWA Hosting & Testing Suite

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'web-app/**'
      - 'extension/**'
      - 'testing/**'
      - '.github/workflows/pwa-testing.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'web-app/**'
      - 'extension/**'
      - 'testing/**'

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: |
        npm test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      selenium-hub:
        image: selenium/hub:4.15.0
        ports:
          - 4444:4444
        options: --health-cmd="curl -f http://localhost:4444/wd/hub/status" --health-interval=10s --health-timeout=5s --health-retries=3

      chrome:
        image: selenium/node-chrome:4.15.0
        env:
          HUB_HOST: selenium-hub
        options: --shm-size=2gb
        
      firefox:
        image: selenium/node-firefox:4.15.0
        env:
          HUB_HOST: selenium-hub
        options: --shm-size=2gb

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Node.js dependencies
      run: npm ci

    - name: Install Python dependencies
      run: |
        cd testing
        pip install -r requirements.txt

    - name: Start web application
      run: |
        npm run build
        npm run preview --workspace=web-app &
        sleep 30

    - name: Wait for services
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:4444/wd/hub/status; do sleep 5; done'
        timeout 60 bash -c 'until curl -f http://localhost:4173/; do sleep 5; done'

    - name: Run integration tests
      run: |
        cd testing
        python -m pytest integration/ -v --html=reports/integration-report.html --self-contained-html
      env:
        SELENIUM_HUB_URL: http://localhost:4444/wd/hub
        APP_BASE_URL: http://localhost:4173

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: testing/reports/
        retention-days: 30

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Build application
      run: npm run build

    - name: Start application
      run: |
        npm run preview --workspace=web-app &
        sleep 30

    - name: Run Playwright tests
      run: npx playwright test
      env:
        CI: true

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  pwa-validation:
    name: PWA Validation
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build PWA
      run: npm run build

    - name: Start PWA server
      run: |
        npm run preview --workspace=web-app &
        sleep 30

    - name: Install PWA testing tools
      run: |
        npm install -g @pwa-builder/pwabuilder-cli
        npm install -g lighthouse

    - name: Validate PWA manifest
      run: |
        curl -f http://localhost:3000/manifest.json
        node -e "
          const manifest = require('./web-app/public/manifest.json');
          console.log('Manifest validation:', JSON.stringify(manifest, null, 2));
          if (!manifest.name || !manifest.short_name || !manifest.start_url) {
            process.exit(1);
          }
        "

    - name: Test Service Worker
      run: |
        curl -f http://localhost:4173/sw.js || curl -f http://localhost:4173/workbox-*.js || echo "Service worker found"

    - name: Run Lighthouse PWA audit
      run: |
        lighthouse http://localhost:4173 \
          --output=html \
          --output-path=./lighthouse-pwa-report.html \
          --chrome-flags="--headless --no-sandbox" \
          --only-categories=pwa \
          --preset=desktop

    - name: Check PWA score
      run: |
        lighthouse http://localhost:4173 \
          --output=json \
          --output-path=./lighthouse-pwa.json \
          --chrome-flags="--headless --no-sandbox" \
          --only-categories=pwa \
          --preset=desktop
        
        node -e "
          const report = require('./lighthouse-pwa.json');
          const pwaScore = report.categories.pwa.score * 100;
          console.log('PWA Score:', pwaScore);
          if (pwaScore < 90) {
            console.error('PWA score is below 90:', pwaScore);
            process.exit(1);
          }
        "

    - name: Upload PWA audit results
      uses: actions/upload-artifact@v4
      with:
        name: pwa-audit-results
        path: |
          lighthouse-pwa-report.html
          lighthouse-pwa.json
        retention-days: 30

  deploy-pwa:
    name: Deploy PWA
    runs-on: ubuntu-latest
    needs: [pwa-validation, e2e-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build PWA for production
      run: npm run build
      env:
        NODE_ENV: production
        VITE_API_URL: https://api.autotest-pro.dev
        VITE_WS_URL: wss://api.autotest-pro.dev

    - name: Configure PWA headers
      run: |
        cat > web-app/dist/_headers << EOF
        /*
          X-Frame-Options: DENY
          X-Content-Type-Options: nosniff
          Referrer-Policy: strict-origin-when-cross-origin
          Permissions-Policy: geolocation=(), microphone=(), camera=()

        /static/*
          Cache-Control: public, max-age=31536000, immutable

        /manifest.json
          Cache-Control: public, max-age=86400
          Content-Type: application/manifest+json

        /sw.js
          Cache-Control: no-cache
          Content-Type: application/javascript

        /*.html
          Cache-Control: public, max-age=0, must-revalidate
          Content-Type: text/html; charset=UTF-8
        EOF

    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v2.1
      with:
        publish-dir: './web-app/dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy PWA from GitHub Actions"
        enable-pull-request-comment: false
        enable-commit-comment: true
        functions-dir: './netlify/functions'
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      if: github.ref == 'refs/heads/main'
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./web-app
        production: true

    - name: Update PWA stores
      run: |
        # Microsoft Store PWA submission
        if [ -n "${{ secrets.MICROSOFT_STORE_KEY }}" ]; then
          npx @pwa-builder/cli package -p windows10 -l info
        fi
        
        # Google Play Store PWA submission via Bubblewrap
        if [ -n "${{ secrets.GOOGLE_PLAY_KEY }}" ]; then
          npx @bubblewrap/cli init --manifest=https://autotest-pro.dev/manifest.json
          npx @bubblewrap/cli build
        fi

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: deploy-pwa
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install monitoring tools
      run: |
        npm install -g lighthouse
        npm install -g @lhci/cli

    - name: Run Lighthouse CI
      run: |
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

    - name: Monitor Core Web Vitals
      run: |
        lighthouse https://autotest-pro.dev \
          --output=json \
          --output-path=./performance-report.json \
          --chrome-flags="--headless --no-sandbox" \
          --preset=desktop

        node -e "
          const report = require('./performance-report.json');
          const metrics = {
            performance: report.categories.performance.score * 100,
            fcp: report.audits['first-contentful-paint'].numericValue,
            lcp: report.audits['largest-contentful-paint'].numericValue,
            cls: report.audits['cumulative-layout-shift'].numericValue,
            fid: report.audits['max-potential-fid'].numericValue
          };
          console.log('Performance Metrics:', JSON.stringify(metrics, null, 2));
          
          // Alert if performance degrades
          if (metrics.performance < 90) {
            console.error('Performance score below threshold');
            // Could integrate with Slack/Teams notifications here
          }
        "

    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-monitoring-report
        path: performance-report.json
        retention-days: 90