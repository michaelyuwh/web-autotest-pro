name: Web App CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'web-app/**'
      - 'shared/**'
      - '.github/workflows/web-app.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'web-app/**'
      - 'shared/**'

env:
  NODE_VERSION: '18.x'

permissions:
  contents: read
  pages: write
  id-token: write
  security-events: write
  actions: read

jobs:
  lint-and-test:
    name: Lint and Test Web App
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd shared && npm ci
        cd ../web-app && npm ci

    - name: Build shared package
      run: |
        cd shared
        npm run build

    # - name: Lint web app
    #   run: |
    #     cd web-app
    #     npm run lint

    - name: Type check
      run: |
        cd web-app
        npm run type-check

    # - name: Run tests
    #   run: |
    #     cd web-app
    #     npm run test

  build-and-deploy:
    name: Build and Deploy Web App
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd shared && npm ci
        cd ../web-app && npm ci

    - name: Build shared package
      run: |
        cd shared
        npm run build

    - name: Build web app
      run: |
        cd web-app
        npm run build
      env:
        CI: false # Treat warnings as warnings, not errors

    - name: Generate PWA icons and setup GitHub Pages
      run: |
        cd web-app
        # Add actual icon generation if needed
        echo "Icons generated"
        # Create CNAME file for custom domain
        echo "autotest-pro.dev" > dist/CNAME

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: web-app-build
        path: web-app/dist/
        retention-days: 30

    - name: Setup GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v3
      with:
        enablement: true

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      id: deployment
      uses: actions/deploy-pages@v2
      with:
        artifact_name: web-app-build

    - name: Deploy to Netlify
      if: github.ref == 'refs/heads/main'
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: web-app/dist
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
        enable-pull-request-comment: false
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './web-app'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  lighthouse-audit:
    name: Lighthouse Audit
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Wait for deployment
      run: sleep 60

    - name: Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        LHCI_SERVER_BASE_URL: https://autotest-pro.dev # Replace with your domain