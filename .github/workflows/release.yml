name: Release & Store Deployment

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      deploy_stores:
        description: 'Deploy to app stores'
        required: true
        default: true
        type: boolean

env:
  NODE_VERSION: '18.x'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Manual release - bump version
          npm version ${{ github.event.inputs.release_type }} --no-git-tag-version
          VERSION=$(node -p "require('./package.json').version")
          TAG="v$VERSION"
        else
          # Tag-triggered release - use existing tag
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"
        echo "Release tag: $TAG"

    - name: Update version in files
      run: |
        VERSION=${{ steps.version.outputs.version }}
        
        # Update package.json files
        jq --arg version "$VERSION" '.version = $version' package.json > tmp.json && mv tmp.json package.json
        
        # Update browser extension manifest
        if [ -f browser-extension/src/manifest.json ]; then
          jq --arg version "$VERSION" '.version = $version' browser-extension/src/manifest.json > tmp.json && mv tmp.json browser-extension/src/manifest.json
        fi
        
        # Update Android app version
        if [ -f android-app/web-autotest-companion/app.json ]; then
          jq --arg version "$VERSION" '.expo.version = $version' android-app/web-autotest-companion/app.json > tmp.json && mv tmp.json android-app/web-autotest-companion/app.json
        fi

    - name: Build all components
      run: |
        # Build web app
        npm run build:pwa:prod
        
        # Build browser extension
        cd browser-extension
        npm ci
        npm run build
        cd ..
        
        # Prepare Android app
        cd android-app/web-autotest-companion
        npm ci
        cd ../..

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          echo "## Changes since $LAST_TAG" > CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          echo "- First release of Web AutoTest Pro" >> CHANGELOG.md
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        release_name: Web AutoTest Pro ${{ steps.version.outputs.version }}
        body: |
          # Web AutoTest Pro ${{ steps.version.outputs.version }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Downloads
          
          - **PWA:** [https://autotest-pro.dev](https://autotest-pro.dev)
          - **Chrome Extension:** [Chrome Web Store](https://chrome.google.com/webstore/detail/web-autotest-pro/ID)
          - **Firefox Extension:** [Firefox Add-ons](https://addons.mozilla.org/en-US/firefox/addon/web-autotest-pro/)
          - **Android App:** [Google Play Store](https://play.google.com/store/apps/details?id=com.autotest.companion)
          
          ## What's Included
          
          - ✅ Cross-browser test automation
          - ✅ Mobile companion app with real-time sync
          - ✅ AI-powered test generation
          - ✅ Video recording and screenshots
          - ✅ Offline PWA support
          - ✅ Export to Selenium/Playwright/Cypress
          
          ## Installation
          
          See [installation guide](https://docs.autotest-pro.dev/installation) for detailed instructions.
        draft: false
        prerelease: false

    - name: Upload web app build
      uses: actions/upload-artifact@v4
      with:
        name: web-app-${{ steps.version.outputs.version }}
        path: dist/
        retention-days: 90

    - name: Upload browser extension
      uses: actions/upload-artifact@v4
      with:
        name: browser-extension-${{ steps.version.outputs.version }}
        path: browser-extension/dist/
        retention-days: 90

  deploy-chrome-extension:
    name: Deploy to Chrome Web Store
    runs-on: ubuntu-latest
    needs: create-release
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download browser extension
      uses: actions/download-artifact@v4
      with:
        name: browser-extension-${{ needs.create-release.outputs.version }}
        path: extension/

    - name: Package extension
      run: |
        cd extension
        zip -r ../web-autotest-pro-chrome.zip .

    - name: Upload to Chrome Web Store
      uses: mnao305/chrome-extension-upload@v4.0.1
      with:
        file-path: web-autotest-pro-chrome.zip
        extension-id: ${{ secrets.CHROME_EXTENSION_ID }}
        client-id: ${{ secrets.CHROME_CLIENT_ID }}
        client-secret: ${{ secrets.CHROME_CLIENT_SECRET }}
        refresh-token: ${{ secrets.CHROME_REFRESH_TOKEN }}
        publish: true

  deploy-firefox-extension:
    name: Deploy to Firefox Add-ons
    runs-on: ubuntu-latest
    needs: create-release
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download browser extension
      uses: actions/download-artifact@v4
      with:
        name: browser-extension-${{ needs.create-release.outputs.version }}
        path: extension/

    - name: Package extension for Firefox
      run: |
        cd extension
        # Update manifest for Firefox if needed
        if [ -f manifest-firefox.json ]; then
          cp manifest-firefox.json manifest.json
        fi
        zip -r ../web-autotest-pro-firefox.zip .

    - name: Submit to Firefox Add-ons
      run: |
        # Install web-ext
        npm install -g web-ext
        
        # Submit to Firefox
        cd extension
        web-ext sign \
          --api-key=${{ secrets.FIREFOX_API_KEY }} \
          --api-secret=${{ secrets.FIREFOX_API_SECRET }} \
          --artifacts-dir=../signed/

    - name: Upload signed Firefox extension
      uses: actions/upload-artifact@v4
      with:
        name: firefox-extension-signed-${{ needs.create-release.outputs.version }}
        path: signed/*.xpi
        retention-days: 90

  deploy-android-app:
    name: Deploy Android App
    runs-on: ubuntu-latest
    needs: create-release
    if: (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) && github.event.inputs.deploy_stores != 'false'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install dependencies
      run: |
        cd android-app/web-autotest-companion
        npm ci

    - name: Install EAS CLI
      run: npm install -g eas-cli@latest

    - name: Build and submit to Google Play
      run: |
        cd android-app/web-autotest-companion
        
        # Update version
        jq --arg version "${{ needs.create-release.outputs.version }}" '.expo.version = $version' app.json > tmp.json && mv tmp.json app.json
        
        # Build and submit
        eas build --platform android --profile production --non-interactive
        eas submit --platform android --non-interactive
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

  deploy-pwa:
    name: Deploy PWA to Production
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Download web app build
      uses: actions/download-artifact@v4
      with:
        name: web-app-${{ needs.create-release.outputs.version }}
        path: dist/

    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v2.1
      with:
        publish-dir: './dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Production release ${{ needs.create-release.outputs.version }}"
        netlify-config-path: ./netlify.toml
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./dist
        production: true

    - name: Update CDN cache
      run: |
        # Purge Cloudflare cache if configured
        if [ -n "${{ secrets.CLOUDFLARE_ZONE_ID }}" ]; then
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "X-Auth-Email: ${{ secrets.CLOUDFLARE_EMAIL }}" \
            -H "X-Auth-Key: ${{ secrets.CLOUDFLARE_API_KEY }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'
        fi

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, deploy-chrome-extension, deploy-firefox-extension, deploy-android-app, deploy-pwa]
    if: always()
    
    steps:
    - name: Send release notification
      uses: actions/github-script@v7
      with:
        script: |
          const deploymentResults = {
            'Chrome Extension': '${{ needs.deploy-chrome-extension.result }}',
            'Firefox Extension': '${{ needs.deploy-firefox-extension.result }}',
            'Android App': '${{ needs.deploy-android-app.result }}',
            'PWA': '${{ needs.deploy-pwa.result }}'
          };
          
          const successEmoji = '✅';
          const failureEmoji = '❌';
          const skippedEmoji = '⏭️';
          
          let deploymentStatus = '';
          for (const [platform, result] of Object.entries(deploymentResults)) {
            const emoji = result === 'success' ? successEmoji : 
                         result === 'failure' ? failureEmoji : skippedEmoji;
            deploymentStatus += `${emoji} ${platform}: ${result}\n`;
          }
          
          const message = `🚀 **Release ${{ needs.create-release.outputs.version }} Deployment Status**
          
          ${deploymentStatus}
          
          **Release Notes:** [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.tag }})
          **PWA:** https://autotest-pro.dev
          **Documentation:** https://docs.autotest-pro.dev
          
          🎉 Web AutoTest Pro is now live with the latest features!`;
          
          // Create a discussion post about the release
          github.rest.discussions.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            category_id: 'announcements',
            title: `🎉 Web AutoTest Pro ${{ needs.create-release.outputs.version }} Released!`,
            body: message
          });

  post-release-tests:
    name: Post-Release Validation
    runs-on: ubuntu-latest
    needs: [deploy-pwa]
    if: needs.deploy-pwa.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Playwright
      run: |
        npm install -g @playwright/test
        npx playwright install --with-deps

    - name: Run production smoke tests
      run: |
        # Test production deployment
        npx playwright test --config=playwright.prod.config.js
      env:
        BASE_URL: https://autotest-pro.dev

    - name: Test PWA functionality
      run: |
        # Test PWA installation and offline functionality
        node scripts/test-pwa-production.js

    - name: Monitor Core Web Vitals
      run: |
        lighthouse https://autotest-pro.dev \
          --output=json \
          --output-path=./production-lighthouse.json \
          --chrome-flags="--headless --no-sandbox"
        
        # Check performance scores
        node -e "
          const report = require('./production-lighthouse.json');
          const performance = report.categories.performance.score * 100;
          const pwa = report.categories.pwa.score * 100;
          
          console.log('Performance Score:', performance);
          console.log('PWA Score:', pwa);
          
          if (performance < 90 || pwa < 90) {
            console.error('Production performance degraded');
            process.exit(1);
          }
        "

    - name: Upload production test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: production-test-results
        path: |
          production-lighthouse.json
          test-results/
        retention-days: 30